{"ast":null,"code":"var _jsxFileName = \"D:\\\\FYP2\\\\FYP\\\\src\\\\themeContext.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext({\n  theme: \"light\"\n});\nexport const ThemeContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [theme, setTheme] = useState('light');\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n    } else {\n      setTheme('light');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}; //Custom hook\n\n_s(ThemeContextProvider, \"c/tiXTWXTQispzpG//dV5FX41vQ=\");\n\n_c = ThemeContextProvider;\nexport const useThemeContext = () => {\n  _s2();\n\n  const context = useContext(ThemeContext);\n\n  if (context === undefined) {\n    throw new Error('useThemeContext must be used within a ThemeProvider');\n  }\n\n  return context;\n};\n\n_s2(useThemeContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["D:/FYP2/FYP/src/themeContext.jsx"],"names":["React","createContext","useState","useContext","ThemeContext","theme","ThemeContextProvider","children","setTheme","toggleTheme","useThemeContext","context","undefined","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;;AAEA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,CAAC;AAAEI,EAAAA,KAAK,EAAE;AAAT,CAAD,CAAlC;AAEP,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAElD,QAAM,CAACF,KAAD,EAAQG,QAAR,IAAoBN,QAAQ,CAAC,OAAD,CAAlC;;AAEA,QAAMO,WAAW,GAAG,MAAM;AAEtB,QAAIJ,KAAK,KAAK,OAAd,EAAuB;AACnBG,MAAAA,QAAQ,CAAC,MAAD,CAAR;AACH,KAFD,MAEO;AACHA,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACH;AACJ,GAPD;;AASA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAC1BH,MAAAA,KAD0B;AAE1BI,MAAAA;AAF0B,KAA9B;AAAA,cAIKF;AAJL;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CArBM,C,CAuBP;;GAvBaD,oB;;KAAAA,oB;AAwBb,OAAO,MAAMI,eAAe,GAAG,MAAM;AAAA;;AACjC,QAAMC,OAAO,GAAGR,UAAU,CAACC,YAAD,CAA1B;;AACA,MAAIO,OAAO,KAAKC,SAAhB,EAA2B;AACvB,UAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;;AAED,SAAOF,OAAP;AACH,CAPM;;IAAMD,e","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\r\n\r\nexport const ThemeContext = createContext({ theme: \"light\" })\r\n\r\nexport const ThemeContextProvider = ({ children }) => {\r\n\r\n    const [theme, setTheme] = useState('light')\r\n\r\n    const toggleTheme = () => {\r\n\r\n        if (theme === 'light') {\r\n            setTheme('dark')\r\n        } else {\r\n            setTheme('light')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{\r\n            theme,\r\n            toggleTheme\r\n        }} >\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    )\r\n}\r\n\r\n//Custom hook\r\nexport const useThemeContext = () => {\r\n    const context = useContext(ThemeContext)\r\n    if (context === undefined) {\r\n        throw new Error('useThemeContext must be used within a ThemeProvider')\r\n    }\r\n\r\n    return context\r\n}"]},"metadata":{},"sourceType":"module"}